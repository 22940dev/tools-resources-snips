[{"doc":"root","title":"root","hpath":"root","content":"\n# [My Code Snippets](https://code.nikitavoloboev.xyz)\n\nThis is a place where I keep snippets of code/notes/config. It is an extension of [my wiki](https://wiki.nikitavoloboev.xyz).\n\nThe source of this [GitBook](https://code.nikitavoloboev.xyz) is on [GitHub](https://github.com/nikitavoloboev/code).\n\nYou can access all snippets using search above or [Alfred My Mind](https://github.com/nikitavoloboev/alfred-my-mind).\n\n## Other code collections\n\n- [Josh Comeau's snippets](https://joshwcomeau.com/snippets/)\n\nDon't be afraid to create one of your own collections & share it with the world.\n\n## Contributing\n\nIf you found a mistake anywhere, I would appreciate your help. GitBook provides a quick way to open GitHub page for any entry so you can make changes and submit a PR.\n\n## Thank you\n\nYou can support me on [GitHub](https://github.com/sponsors/nikitavoloboev) or look into [other projects](https://nikitavoloboev.xyz/projects) I shared.\n\n[![CC4](https://img.shields.io/badge/license-CC4-0a0a0a.svg?style=flat&colorA=0a0a0a)](https://creativecommons.org/licenses/by/4.0/) [![Twitter](http://bit.ly/nikitatweet)](https://twitter.com/nikitavoloboev)\n","url":"https://epictools.dev","relUrl":"/"},{"doc":"Zsh","title":"Zsh","hpath":"zsh","content":"```bash\n# Read function definition\nwhence -f ..\n\n# See where the it was defined\nwhence -v\n```\n\n```bash\n# Bind comand to alt key\n# alt+i will run 'a' command.\n# \\e means opt key\nbindkey -s '\\ei' '^Ua^M'\n```\n\n```bash\n# See what is binded to a key\n# See what is binding to ⌃ + E\nbindkey '^E'\n```\n\n```bash\n# Run zsh without sourcing zshrc\nzsh -f\n```\n\n```bash\n# Set alias to external command\nalias fin='command fd'\n```\n\n```bash\n# List all bindings\nbindkey\n```\n\n","url":"https://epictools.dev/notes/ff775cda-d1da-4e8f-889a-5315629079a7.html","relUrl":"notes/ff775cda-d1da-4e8f-889a-5315629079a7.html"},{"doc":"Vim","title":"Vim","hpath":"vim","content":"```viml\n\" Insert text in the end of each line\n\" s/ - substitute.\n\" $ - the end of the line.\n\" / - change it to.\n\" , - a comma.\n:%s/$/,\n```\n\n```viml\n\" Lowercase line\nVu\n```\n\n```viml\n\" Find char backwards\nF<char>\n```\n\n```viml\n\" Delete backwards until char\ndT<char>\n```\n\n```viml\n\" Visually select until char\nv/<char><return>\n```\n\n```viml\n\" Delete all lines in file\n:%d\n```\n\n```viml\n\" Yank two inner words\n\" Yanks first and second words (with the trailing space) in the unnamed register\ny2aw\n```\n\n```viml\n\" Delete until start of line\nd0\n```\n\n```viml\n\" Yank entire file\n:%y+\n```\n\n```viml\n\" Select entire block\nVat\n```\n\n```viml\n\" Visually select until end of line\nv$\n```\n\n```viml\n\" Visually select paragraph or function\nV}\n```\n\n```viml\n\" See whats in a buffer\n\" See insides of q buffer\n:echo @q\n```\n\n```viml\n\" See registers\n:registers\n```\n\n```viml\n\" Delete until end of file\nVGx\n```\n\n```viml\n\" Visually select block\nV%\n```\n\n```viml\n\" Start recording macro\n\" Record to register d\nqd\n```\n\n```viml\n\" Delete char under cursor\nx\n```\n\n```viml\n\" Yank inside tag. Can yank an XML tag for example\nyat\n```\n\n```viml\n\" Make multi line search. https://vim.fandom.com/wiki/Search_across_multiple_lines\n\" Will carry over to new line\n\\_s\n```\n\n```viml\n\" Inclusive search\n/foo/e\n```\n\n```viml\n\" Delete until searched string. Won't delete string itself.\nd/string\n```\n\n```viml\n\" Search and replace\n:%s/<search>/<replace>/g\n```\n\n```viml\n\" Run command on startup\n\" Run ':Goyo' on startup. Put it in .vimrc\nautocmd VimEnter * Goyo\"\n```\n\n```viml\n\" Insert text at start of each line in file\n\" Insert // at start of each line in file\n:%s!^!//!\n```\n\n```viml\n\" Replay last macro\n@@\n```\n\n```viml\n\" Delete until character\ndf<char>\n```\n\n```viml\n\" Centre current line\nzz\n```\n\n```viml\n\" Put results of command into a register\n\" In normal mode, will put results of d$ command into _ (black hole register)\n\"_d$\n```\n\n```viml\n\" Run macro on whole file\n:%normal @x \" will run macro x\n```\n\n","url":"https://epictools.dev/notes/48d0543c-51ea-4c87-bebc-7ab53bec66dc.html","relUrl":"notes/48d0543c-51ea-4c87-bebc-7ab53bec66dc.html"},{"doc":"Summary","title":"Summary","hpath":"summary","content":"# Summary\n\n- [CMD](cmd.md)\n- [CMD Run](cmd-run.md)\n- [CMD Explain](cmd-explain.md)\n- [Git](git.md)\n- [JavaScript](javascript.md)\n- [HTML](html.md)\n- [Go](go.md)\n- [Python](python.md)\n- [Bookmarklets](bookmarklets.md)\n- [GitHub Badges](github-badges.md)\n- [Alfred](alfred.md)\n- [Regex](regex.md)\n- [Nix](nix.md)\n- [macOS defaults](macos-defaults.md)\n- [Definitions](definitions.md)\n- [Hammerspoon](hammerspoon.md)\n- [Sublime Text](sublime-text.md)\n- [Bash](bash.md)\n- [Zsh](zsh.md)\n- [JXA](jxa.md)\n- [AppleScript](applescript.md)\n- [Vim](vim.md)\n- [Config](config.md)\n- [Keyboard Maestro](keyboard-maestro.md)\n- [Karabiner](karabiner.md)\n\n","url":"https://epictools.dev/notes/d7c60eb8-5c1a-4a49-b1aa-47ca0ae69c52.html","relUrl":"notes/d7c60eb8-5c1a-4a49-b1aa-47ca0ae69c52.html"},{"doc":"Sublime Text","title":"Sublime Text","hpath":"sublime-text","content":"```python\n# Turn on logging of actions. Insert it in the Sublime console.\nsublime.log_input(True); sublime.log_commands(True); sublime.log_result_regex(True)\n```\n\n","url":"https://epictools.dev/notes/61f8afd5-53e1-487c-b57c-17ec3c5e44d9.html","relUrl":"notes/61f8afd5-53e1-487c-b57c-17ec3c5e44d9.html"},{"doc":"Regex","title":"Regex","hpath":"regex","content":"[Match if it has notes or twitter in input](https://regex101.com/r/eKyP11/2)\n`^(?=.*(?:notes|twitter)).*`\n\nMatch all that don't have notes or twitter in input\n`^(?!._(?:notes|twitter))._`\n\n","url":"https://epictools.dev/notes/d94a18d2-6044-412c-a1c7-ddfc88012aae.html","relUrl":"notes/d94a18d2-6044-412c-a1c7-ddfc88012aae.html"},{"doc":"Readme","title":"Readme","hpath":"readme","content":"# [My Code Snippets](https://code.nikitavoloboev.xyz)\n\nThis is a place where I keep snippets of code/notes/config. It is an extension of [my wiki](https://wiki.nikitavoloboev.xyz).\n\nThe source of this [GitBook](https://code.nikitavoloboev.xyz) is on [GitHub](https://github.com/nikitavoloboev/code).\n\nYou can access all snippets using search above or [Alfred My Mind](https://github.com/nikitavoloboev/alfred-my-mind).\n\n## Other code collections\n\n- [Josh Comeau's snippets](https://joshwcomeau.com/snippets/)\n\nDon't be afraid to create one of your own collections & share it with the world.\n\n## Contributing\n\nIf you found a mistake anywhere, I would appreciate your help. GitBook provides a quick way to open GitHub page for any entry so you can make changes and submit a PR.\n\n## Thank you\n\nYou can support me on [GitHub](https://github.com/sponsors/nikitavoloboev) or look into [other projects](https://nikitavoloboev.xyz/projects) I shared.\n\n[![CC4](https://img.shields.io/badge/license-CC4-0a0a0a.svg?style=flat&colorA=0a0a0a)](https://creativecommons.org/licenses/by/4.0/) [![Twitter](http://bit.ly/nikitatweet)](https://twitter.com/nikitavoloboev)\n\n","url":"https://epictools.dev/notes/2a0abe66-b76e-45e2-b05d-17de5366e7e9.html","relUrl":"notes/2a0abe66-b76e-45e2-b05d-17de5366e7e9.html"},{"doc":"Python","title":"Python","hpath":"python","content":"```python\n# read file line by line\nwith open('filename') as f:\n    content = f.readlines()\n```\n\n```python\n# Iterate over list\nfor i, _ in enumerate(nums):\n  ..\n```\n\n","url":"https://epictools.dev/notes/8c907ee5-d72e-4015-8459-1da0a013ff86.html","relUrl":"notes/8c907ee5-d72e-4015-8459-1da0a013ff86.html"},{"doc":"Nix","title":"Nix","hpath":"nix","content":"```bash\n# Build nix package locally.\n\n# cd into cloned https://github.com/NixOS/nixpkgs\n\n# Build package from default.nix inside nixpkgs. Will put result as ./result if succeeds\n# i.e. nix-build -A watchexec -> will build watchexec package\nnix-build -A <package>\n\n# Install the build and put it `~/.nix-profile/bin`\nnix-env -i ./result\n```\n\n```bash\n# Garbage collect\nsudo nix-collect-garbage --delete-older-than 30d\n```\n\n","url":"https://epictools.dev/notes/a8c8fe38-b1c5-40ca-b51e-f22066e82583.html","relUrl":"notes/a8c8fe38-b1c5-40ca-b51e-f22066e82583.html"},{"doc":"Macos Defaults","title":"Macos Defaults","hpath":"macos-defaults","content":"```bash\n# Remove dock animation. https://www.reddit.com/r/apple/comments/6xg9xq/tip_of_the_day_one_thing_i_cant_live_without_in/\ndefaults write com.apple.dock autohide-delay -int 0\ndefaults write com.apple.dock autohide-time-modifier -float 0.4\nkillall Dock\n\n# Revert\ndefaults delete com.apple.dock autohide-delay\ndefaults delete com.apple.dock autohide-time-modifier\nkillall Dock\n```\n\n```bash\n# Turn internal keyboard off. https://discussions.apple.com/thread/5044946?answerId=26556362022#26556362022\nsudo kextunload /System/Library/Extensions/AppleUSBTopCase.kext/Contents/PlugIns/AppleUSBTCKeyboard.kext/\n\n# Turn internal keyboard on\nsudo kextload /System/Library/Extensions/AppleUSBTopCase.kext/Contents/PlugIns/AppleUSBTCKeyboard.kext/\n```\n\n","url":"https://epictools.dev/notes/d3bc5bd3-3d43-4fd4-bc2b-445a177d17af.html","relUrl":"notes/d3bc5bd3-3d43-4fd4-bc2b-445a177d17af.html"},{"doc":"Keyboard Maestro","title":"Keyboard Maestro","hpath":"keyboard-maestro","content":"# Keyboard Maestro\n\n### System Clipboard variable\n\n`%SystemClipboard%`\n\n### Var as token\n\n`%Variable%%{left}{key:⌃L}`\n\n### Var for shell\n\n`\"$KMVAR_\"{left}{key:⌃L}`\n\n### Variable\n\n`%Variable%{^}%`\n\n","url":"https://epictools.dev/notes/cd9bebfe-794a-4d36-b639-0f6872a3d61f.html","relUrl":"notes/cd9bebfe-794a-4d36-b639-0f6872a3d61f.html"},{"doc":"Karabiner","title":"Karabiner","hpath":"karabiner","content":"### 3 finger trackpad actions\n\n```edn\n{:des \"hold three fingers on trackpad & press keys\" :rules [\n   [:condi [\"multitouch_extension_finger_count_total\" 3]]\n   [:f :button2] ;\n   :v [:button1 :!Cv]]\n;]}\n```\n\n","url":"https://epictools.dev/notes/43446c13-0957-4309-a41f-34b5bdfc807c.html","relUrl":"notes/43446c13-0957-4309-a41f-34b5bdfc807c.html"},{"doc":"Jxa","title":"Jxa","hpath":"jxa","content":"```javascript\n// Get URL of front most tab\nApplication(\"Google Chrome Canary\").windows[0].activeTab.url();\n```\n\n```javascript\n// Activate app\nit = Application(\"Safari\");\nit.activate();\n```\n\n```javascript\n// Minimize all Safari windows but the currently focused one\nsafari = Application(\"Safari\");\n\n// Front most window has index 0\nfor (var i = 1; i < safari.windows.length; i++) {\n  var win = safari.windows[i];\n  if (win.miniaturized() === false) win.miniaturized = true;\n}\n```\n\n```javascript\n// Get selected text in Chrome Canary\nApplication(\"Google Chrome Canary\").windows[0].activeTab.execute({\n  javascript: \"window.getSelection().toString()\",\n});\n```\n\n```javascript\n// Return current active line in TaskPaper.\n(() => {\n  \"use strict\";\n\n  const main = () => {\n    const tp3Context = (editor, options) => {\n      const main = () =>\n        unlines(\n          concatMap((x) => {\n            const txt = x[options.textProperty];\n            return options.skipBlankLines && 0 === txt.length ? [] : [txt];\n          }, editor.selection.selectedItems)\n        );\n\n      // GENERIC FUNCTIONS FOR TP3 CONTEXT ----------\n      // https://github.com/RobTrew/prelude-jxa\n\n      // concatMap :: (a -> [b]) -> [a] -> [b]\n      const concatMap = (f, xs) => xs.reduce((a, x) => a.concat(f(x)), []);\n\n      // unlines :: [String] -> String\n      const unlines = (xs) => xs.join(\"\\n\");\n\n      // TP3 MAIN ---\n      return main();\n    };\n\n    const ds = Application(\"TaskPaper\").documents,\n      lrResult = bindLR(\n        ds.length > 0 ? Right(ds.at(0)) : Left(\"No TaskPaper documents open\"),\n        (d) =>\n          Right(\n            d.evaluate({\n              script: tp3Context.toString(),\n              withOptions: {\n                skipBlankLines: true,\n                textProperty: \"bodyContentString\", // or 'bodyContentString'\n              },\n            })\n          )\n      );\n    return lrResult.Left || lrResult.Right;\n  };\n\n  // GENERIC FUNCTIONS FOR JXA CONTEXT ------------------\n  // https://github.com/RobTrew/prelude-jxa\n\n  // Left :: a -> Either a b\n  const Left = (x) => ({\n    type: \"Either\",\n    Left: x,\n  });\n\n  // Right :: b -> Either a b\n  const Right = (x) => ({\n    type: \"Either\",\n    Right: x,\n  });\n\n  // bindLR (>>=) :: Either a -> (a -> Either b) -> Either b\n  const bindLR = (m, mf) => (undefined !== m.Left ? m : mf(m.Right));\n\n  // MAIN ----\n  return main();\n})();\n```\n\n","url":"https://epictools.dev/notes/01f970c7-e272-41d4-9618-2d770c525d23.html","relUrl":"notes/01f970c7-e272-41d4-9618-2d770c525d23.html"},{"doc":"JavaScript","title":"JavaScript","hpath":"javascript","content":"```js\n// Click on buttons in a page\n// https://twitter.com/brian_lovin/status/1240662440666222597\n\nlet buttons = document.getElementsByClassName(\"unfollow\");\n\nfor (let [i, v] of [...buttons].entries()) {\n  setTimeout(() => {\n    buttons[i].click();\n  }, i * 500);\n}\n```\n\n```js\n// Go to specific URL\nwindow.location.href = \"https://www.google.com\";\n```\n\n```js\n// Speed up video playback. Put in console of open page.\n$(\"video\").playbackRate = 2;\n```\n\n```js\n// click on all the expand buttons on https://github.com/\nvar inputs = document.querySelectorAll(\"svg[aria-label=Expand]\");\nvar buttons = Array.from(inputs).map((e) => e.parentElement.parentElement);\nbuttons.forEach((b) => b.click());\n```\n\n","url":"https://epictools.dev/notes/7fa13109-2af3-4e97-bea4-241646173a56.html","relUrl":"notes/7fa13109-2af3-4e97-bea4-241646173a56.html"},{"doc":"HTML","title":"HTML","hpath":"html","content":"```html\n<!-- Embed email inside link -->\n<a href=\"mailto:name@gmail.com\">Email me</a>\n```\n\n```html\n<!-- Add image to the side with link -->\n<!-- Useful in GitHub readmes. Can adjust width or add height. -->\n<img\n  src=\"https://i.imgur.com/hZe2AUY.png\"\n  align=\"right\"\n  width=\"70\"\n/>](https://nodejs.org)\n```\n\n```html\n<!-- Breaking space. Can use in readme to separate things. -->\n&nbsp;\n```\n\n```html\n<!-- Collapsable content -->\n<details>\n  <summary>Table of Contents</summary>\n\n  * [About](#about) * [Screenshots](#screenshots) * ..\n</details>\n```\n\n","url":"https://epictools.dev/notes/a58b1207-365d-4aa1-a03a-4cbf53f8db84.html","relUrl":"notes/a58b1207-365d-4aa1-a03a-4cbf53f8db84.html"},{"doc":"Hammerspoon","title":"Hammerspoon","hpath":"hammerspoon","content":"\n```lua\n-- Call Hammerspoon functions from AppleScript\n\n-- First activate applescript support:\nhs.allowAppleScript(true)\n\n-- Then you can call functions from your lua code like this:\ntell application \"Hammerspoon\"\nexecute lua code \"showClipBoardContent()\"\nend tell\n\n-- In the above case it would call showClipBoardContent() function\n```\n\n```lua\n-- Bind function to hotkey\nhs.hotkey.bind(\"ctrl\", \"return\", function()\n  hs.notify.new({title=\"Hammerspoon\", informativeText=\"Hello World\"}):send()\nend)\n```\n\n```lua\n-- URL handler alert\n\nhs.urlevent.bind(\"someAlert\", function(eventName, params)\n    hs.alert.show(\"Hey there alert\")\nend)\n\n-- After having this line in init.lua\n-- you can then call it from the shell like so\nopen -g hammerspoon://someAlert\n```\n","url":"https://epictools.dev/notes/cfb5b341-029a-4318-8c0f-8fc849f68ac7.html","relUrl":"notes/cfb5b341-029a-4318-8c0f-8fc849f68ac7.html"},{"doc":"Go","title":"Go","hpath":"go","content":"\n```go\n// Log error\nif err != nil {\n  log.Fatal(err)\n}\n```\n","url":"https://epictools.dev/notes/43a90d4c-d584-4124-ae6f-5d8d70695287.html","relUrl":"notes/43a90d4c-d584-4124-ae6f-5d8d70695287.html"},{"doc":"GitHub Badges","title":"GitHub Badges","hpath":"github-badges","content":"# GitHub badges\n\nGoDoc\n\n```md\n[![GoDoc]({clip}?status.svg)]({clip})\n```\n\nAwesome List\n\n```md\n[![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)\n```\n\n","url":"https://epictools.dev/notes/79e469fd-f283-46ff-bbbd-fb53af6c0677.html","relUrl":"notes/79e469fd-f283-46ff-bbbd-fb53af6c0677.html"},{"doc":"Git","title":"Git","hpath":"git","content":"# git\n\n```bash\n# Cleanup .git http://gcc.gnu.org/ml/gcc/2007-12/msg00165.html\ngit repack -a -d --depth=250 --window=250\n\n# Reset to previous commit\ngit reset HEAD~\n\n# Reset to commit\ngit reset <commit hash> --hard\n\n# Checkout previous commit\ngit checkout HEAD~\n\n# Create new branch\ngit checkout -b\n\n# Revert changes to modified files (working changes)\ngit reset --hard\n\n# New branch without git history & files\ngit checkout --orphan\n\n# Show where git configs get defined\ngit config --show-origin -l\n\n# Undo last commit but don't throw away changes\ngit reset --soft HEAD^\n\n# List all git submodules\ngit submodule--helper list\n\n# Pull from PR\ngit pull origin pull/<issue ID>/head\n\n# List remote branches\ngit branch -a\n\n# Delete branch\ngit branch -d\n\n# Delete remote branch\ngit push origin --delete\n\n# Force overwrite git repo. https://stackoverflow.com/questions/10510462/force-git-push-to-overwrite-remote-files\ngit push -f <remote> <branch>\n\n# Reset to specific commit\ngit reset --hard <commit>\n\n# Remove dir from git\ngit rm --cached -r <dir>\n\n# Rename previous commit\ngit commit --amend\n\n# Force push overwrite\ngit push --force origin master\n\n# Hard reset a branch\ngit reset --hard <branch-name>\n\n# Change remote. i.e. when making a fork of a clone to change upstream destination.\ngit remote rename origin upstream; git remote rename nikitavoloboev origin\n\n# Change upstream to my name so it pushes there\ngit branch --set-upstream-to nikitavoloboev/master master\n\n# Show changes between commits. Where f5352 and be73 are unique commit hashes.\ngit diff f5352 be73\n\n# Update submodule\ngit submodule update\n\n# Set PGP key for Git globally. <key> = fingerprint w/o spaces\ngit config --global user.signingkey <key>\n```\n\n```bash\n# Delete commit from remote.\n\n# 1. Delete commit from local repo\ngit reset --hard HEAD~1\n\n# 2. Delete commit from remote repo (can get commit using git log)\ngit push -f origin last_known_good_commit:branch_name\n```\n\n### Change old commit message\n\n```bash\n#\n# It is bad practice to rewrite history. Works best if no one has pushed commits on top of remote branch you want to rewrite history of.\n\n# 1. Rebase to commit you want to change (~1 means the first ancestor of the specified commit)\ngit rebase -i <hash>~1\n\n# Can also do this\ngit rebase -i HEAD~4 # where HEAD~4 = last 3 commits\n\n# 2. Rename pick to reword (in opened editor) & save/quit\n\n# 3. Change commit message in editor and save\n\n# 4. Overwrite and remove duplicate commits\ngit push --force-with-lease\n```\n\n### [Quickly pull down PRs](https://davidwalsh.name/5-essential-git-commands-and-utilities)\n\n```bash\ngit config --global --add alias.pr '!f() { git fetch -fu ${2:-upstream} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f'\n\ngit config --global --add alias.pr-clean '!git checkout master ; git for-each-ref refs/heads/pr/* --format=\"%(refname)\" | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done'\n```\n\n","url":"https://epictools.dev/notes/af8b06f1-223f-4869-a0e4-f4d0caf5e6ee.html","relUrl":"notes/af8b06f1-223f-4869-a0e4-f4d0caf5e6ee.html"},{"doc":"Quickstart","title":"Quickstart","hpath":"dendron","content":"\nWelcome to Dendron! This guide will help get you started with your knowledge base.\n\n## The Trail 🥾\n\nThis section covers the basics of Dendron. Get started on the right foot and start growing your knowledge base.\n\n- [ ] Go through Dendron's basic [concepts](https://www.dendron.so/notes/c6fd6bc4-7f75-4cbb-8f34-f7b99bfe2d50.html)\n- [ ] Do your first [lookup](https://www.dendron.so/notes/a7c3a810-28c8-4b47-96a6-8156b1524af3.html#lookup-menu) - a better way to find your notes\n- [ ] Learn about [schemas](https://www.dendron.so/notes/c5e5adde-5459-409b-b34d-a0d75cbb1052.html#schemas) - a flexible type system for all your notes\n- [ ] Use a [snippet](https://www.dendron.so/notes/9eca1992-7540-4d9d-97fb-328b27748b2c.html)\n- [ ] Insert an [image](https://www.dendron.so/notes/a91fd8da-6895-49fe-8164-a17acd8d9a17.html)\n- [ ] Create some [links](https://www.dendron.so/notes/3472226a-ff3c-432d-bf5d-10926f39f6c2.html)\n- [ ] Explore additional features from [Dendron's bundled extensions](https://www.dendron.so/notes/301e4129-6933-4be7-a4bd-8125171360d8.html)\n- [ ] [Publish](https://www.dendron.so/notes/73d395c9-5041-4d0d-9db7-080d9586136e.html) your vault\n- [ ] Join us on [discord](https://discord.com/invite/6j85zNX) and discuss all things knowledge management with your fellow trail blazers.\n\n## The Woods 🌲\n\nThis section covers advanced functionality in Dendron. Become a seasoned backpacker by mastering these trails.\n\n- [ ] Check out our [case studies](https://www.dendron.so/notes/34ee4bcf-60e9-4031-a4c0-26113b5acb80.html)\n- [ ] Read our [FAQ](https://www.dendron.so/notes/683740e3-70ce-4a47-a1f4-1f140e80b558.html)\n- [ ] Explore the [graph view](https://www.dendron.so/notes/587e6d62-3c5b-49b0-aedc-02f62f0448e6.html)\n- [ ] Execute custom [Dendron commands](https://www.dendron.so/notes/eea2b078-1acc-4071-a14e-18299fc28f47.html)\n- [ ] Understand [frontmatter](https://www.dendron.so/notes/ffec2853-c0e0-4165-a368-339db12c8e4b.html)\n- [ ] Adopt a [pod](https://www.dendron.so/notes/66727a39-d0a7-449b-a10d-f6c438185d7f.html)\n- [ ] Create a [special note](https://www.dendron.so/notes/5c213aa6-e4ba-49e8-85c5-1bdcb33ce202.html)\n\n## The Wilderness ⛰️\n\nThis section covers additional topics and the wider ecosystem around Dendron.\n\n- [ ] Find [recipes](https://www.dendron.so/notes/401c5889-20ae-4b3a-8468-269def4b4865.html) to common operations (or contribute your own)\n- [ ] Found an issue or want to submit a feature request? Do so on [GitHub](https://github.com/dendronhq/dendron/issues)\n- [ ] See and vote on what's coming next by checking out our [public roadmap](https://github.com/orgs/dendronhq/projects/1)\n- [ ] Get familiar with [editing](https://code.visualstudio.com/docs/editor/codebasics) in VS Code, the editor that Dendron is built upon\n- [ ] Stay tuned for more wilderness coming soon!\n","url":"https://epictools.dev/notes/e86ac3ab-dbe1-47a1-bcd7-9df0d0490b40.html","relUrl":"notes/e86ac3ab-dbe1-47a1-bcd7-9df0d0490b40.html"},{"doc":"Dendron","title":"Dendron","hpath":"dendron.welcome","content":"\n# Welcome to Dendron 🌲\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/logo-256.png)\n\nDendron is a new approach to note taking, one that combines the freedom of Roam's *every note exists everywhere philosophy* with the organization provided by *flexible hierarchies*. \n\nWe call this the [hierarchy first approach](https://www.kevinslin.com/notes/3dd58f62-fee5-4f93-b9f1-b0f0f59a9b64.html) to note taking.\n\n## What is a Dendron?\n1. Dendron is the greek word for tree. It's a reference to the hierarchal note taking that Dendron(3) enables. \n2. Dendron is another word for [dendrite](https://en.wikipedia.org/wiki/Dendrite) which is an extension of the nerve cell that sends and receives signals in the brain. Think of Dendron(3) as a digital nervous system that helps you consolidate all the information that you care about in the fastest and most efficient way possible.\n3. Dendron is a local-first, markdown based, hierarchical note taking tool. It is meant to help you build, organize, and share knowledge bases of any size.\n\n## How do I get started?\n\n1. Launch the _command bar_ inside vscode:\n    - Linux: `Ctrl+Shift+P`\n    - macOS: `Cmd+Shift+P`\n    - Windows: `Ctrl+Shift+P`\n2. Paste the following command and press `Enter`:\n\n```sh\n> Dendron: Initialize Workspace\n```\n\n![Initialize workspace](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/dendron-init.gif)\n\nWhen the workspace opens, it will show dialogue to install additional recommended extensions. \n","url":"https://epictools.dev/notes/05774b2e-ebf7-4bbc-8171-ad191ba0ae0a.html","relUrl":"notes/05774b2e-ebf7-4bbc-8171-ad191ba0ae0a.html"},{"doc":"Definitions","title":"Definitions","hpath":"definitions","content":"```bash\n# $PATH\n\n# Add to beginning of $PATH\nPATH=~/opt/bin:$PATH\n\n# Add to end of $PATH\nPATH=$PATH:~/opt/bin\n```\n\n```bash\n# Standard input & output\n\n# Send output of command to a file instead of terminal\n# Shell will create a file if it does not exist, if it does, the shell erases (clobbers) the original file first\ncommand > file\n\n# Append to file\ncommand >> file\n\n# Match every line that I type after that has 'this' in it and put the results in to hello_grep.txt file\ngrep this > hello_grep.txt\n\n# Put all the lines matching 'line' into grep_output.txt file\ngrep line hello.txt > grep_output.txt\n\n# >> Redirect output to append to FILE\ngrep line hello.txt >> grep_output.txt\n\n# Redirect standard error stream to FILE\n# where 2> means redirect output stream 2 to write results to the\n# file and not to the terminal\nfind / -name 'story.txt' 2> error_log.txt\n\n# 1> specifies stream ID 1 (standard output) (default)\n# 2> specifies stream ID 2 (standard error)\n\n# Sends both standard error and output to some location\nls /fffff > f 2>&1\n```\n\n```md\n- Accept - Specifies the file format the requester wants.\n- Accept-Language - Specifies the human-readable language, like English, Spanish, or Russian.\n- Cache-Control - Specifies whether the response can be generated from a cache.\n```\n\n```bash\n# Globbing\n\n# Shell can match simple patterns to file and directory names\n# this process is known as globbing\n\n# Simplest of these is the glob character * which tells the shell to match any number of arbitrary characters\n\n# Print a list of files in current directory\necho *\n\n# Shell matches arguments containing globs to filenames\n# substititutes the filenames for those arguments, and then runs the revised command line\n# the substitution is called expansion because the shell substitutes all matching filenames\n\n\nat* # Expands to all filenames that start with at\n\n*at # Expands to all filenames that end with at\n\n*at* # Expands to all filenames that contain at\n\n\n# Another shell glob character is (?) - it instructs the shell to match exactly one arbitrary character\n\n# Match both boat and brat\nb?at\n\n# If you don't want the shell to expand a glob in a command, enclose the glob in single quotes ('')\n\n# It is important to remember that the shell performs expansions before running commands\n```\n\n```md\nASCII code\n\n- ASCII is an encoding representing each typed letter by a number\n- each number is stored in one byte (so the number is in 0..255)\n  - A is 65\n  - B is 66\n  - space is 32\n- \"Unicode\" is an encoding for mandarin, greek, arabic, etc. languages\n  - typically 2-bytes per \"letter\"\n\n![](https://i.imgur.com/qbFb4Ik.png)\n```\n\n```md\nHTTP status codes\n\n- 200-299 are good\n- 300-399 understood (located elsewhere)\n- 400-499 error (404 = resource no longer exists)\n- 400-599 server end (500 = some error on the server)\n```\n\n```md\nHTTP REST methods\n\n- GET - Used for fetching either a collection of resources or a single resource.\n- POST - Used to add a new resource to a collection.\n  - For example, we wouldn't POST to /players/567 or /games/1234 because they aren't collections.\n  - We would, however, POST to /players or /games to create a new player or a new game.\n- PUT - Use when we want to update a record. We wouldn't use PUT on collection or list URLs.\n- DELETE - Used for sending a DELETE request to a detail record, a URL for a single record, should delete just that record.\n  - Sending DELETE to an entire collection would delete the whole collection but that's usually not implemented, with good reason.\n```\n\n","url":"https://epictools.dev/notes/cf011bda-9363-43f3-8653-77b740ae8632.html","relUrl":"notes/cf011bda-9363-43f3-8653-77b740ae8632.html"},{"doc":"Config","title":"Config","hpath":"config","content":"## Config\n\n### macOS apps I have installed\n\n```bash\n# Output of `ls /Applications`\n1Password 7.app\n2Do.app\nAlfred 4.app\nAndroid Studio.app\nAppCleaner.app\nAviary.app\nBetterTouchTool.app\nCleanShot X.app\nDarkroom.app\nDash.app\nDeliveries.app\nDiscord.app\nDocker.app\nFantastical.app\nFigma.app\nGoogle Chrome Canary.app\nIINA.app\nKarabiner-Elements.app\nKarabiner-EventViewer.app\nKeyboard Maestro.app\nLoom.app\nMarked 2.app\nMindNode.app\nNotion.app\nPaw.app\nPixave.app\nPixelmator Pro.app\nPostico 2.app\nProxyman.app\nReeder.app\nSafari.app\nSip.app\nSlack.app\nSpark.app\nSpline.app\nSpotify.app\nSublime Merge.app\nSublime Text.app\nSyncalicious.app\nTelegram.app\nTextual 7.app\nTransmission.app\nTweetbot.app\nUtilities\nVimari.app\nVisly.app\nVisual Studio Code - Insiders.app\nWhatsApp.app\nWipr.app\nXcode.app\niTerm.app\nzoom.us.app\n```\n\n### CLI tools I use\n\n```bash\n# Brew (/usr/local/bin)\nagda\nantibody\naom\nbash\nbat\ncabal-install\ncairo\ncloc\nclojure\ncmake\ndhall\ndiff-so-fancy\ndirenv\ndry\nemacs\nexa\nffmpeg\nflac\nfnm\nfontconfig\nfreetype\nfrei0r\nfribidi\nfzf\ngdbm\ngettext\nghc\ngiflib\ngit\nglib\ngmp\ngnutls\ngo\ngoku\ngraphite2\nharfbuzz\nhttpie\nhub\nhugo\nhyperfine\nicu4c\nidris\njemalloc\njoker\njpeg\njq\nkubernetes-cli\nlame\nleptonica\nlibass\nlibbluray\nlibevent\nlibffi\nlibidn2\nlibogg\nlibpng\nlibsamplerate\nlibsndfile\nlibsoxr\nlibtasn1\nlibtermkey\nlibtiff\nlibunistring\nlibuv\nlibvorbis\nlibvpx\nlibvterm\nlittle-cms2\nloc\nlua\nluajit\nlzo\nmitmproxy\nmsgpack\nmysql\nneovim\nnettle\nnode\noniguruma\nopencore-amr\nopenjpeg\nopenssl\nopus\np11-kit\npcre\npcre2\nperl\npixman\npkg-config\npostgresql\nprotobuf\npython\npython@2\nreadline\nripgrep\nrlwrap\nrtmpdump\nrubberband\nrustup-init\nscreenfetch\nsdl2\nsnappy\nspeex\nsqlite\ntesseract\ntheora\ntree\nunbound\nunibilium\nup\nwatchexec\nwebp\nwget\nwifi-password\nx264\nx265\nxvid\nxz\nyarn\n\n# Go (~/go/bin)\n2048-ai\nalfred\nalfred-awesome-lists\nalfred-gcal\naligncheck\nasmfmt\nbat\ncaddy\nccat\nchroma\nclient\ncobra\ncowsay\ncowthink\ncowyo\ncroc\ndeadcode\ndep\ndepth\ndevd\ndlv\ndomaincoloring\ndupl\necsy\nelvish\nerrcheck\nfibutil\nfillstruct\nfuzzy-cached\nfuzzy-simple\ngas\ngb\ngb-vendor\ngin\ngithub-release\ngo-bindata\ngo-langserver\ngo-outline\nGo-Package-Store\ngo-pry\ngo-search\ngo-symbols\ngoalfred\ngocode\ngoconst\ngocyclo\ngodef\ngodoc\ngogetdoc\ngoimports\ngolang-restapi\ngolint\ngometalinter\ngomodifytags\ngopkgs\ngoplay\ngops\ngore\ngorename\ngoreturns\ngorram\ngosimple\ngotags\ngotests\ngotop\ngotype\ngotype-live\ngowebapp\nguru\nhey\nhttplab\nhttpstat\nimpl\nineffassign\ninterfacer\njump\nlf\nlicense-up\nlll\nmarkdown-parser\nmd-to-alfred\nmd-to-list-filter\nmegacheck\nmisspell\nmodd\nmotion\nmuffet\nmultic\nng\nnikitavoloboev\npigeon\nplaygo\nprimitive\nprotoc-gen-go\npullkee\npxl\nrayito\nrclone\nreflex\nrichgo\nsafesql\nserve\nserver\nshfmt\nslicer\nsnake-game\nstatic-docs\nstaticcheck\nstructcheck\ntask\nTasks\nthyme\nunconvert\nunparam\nunused\nusql\nvarcheck\nweather\n\n# Rust (~/.cargo/bin)\ncargo\ncargo-fmt\nkaraconv\nloc\nrls\nrust-gdb\nrust-lldb\nrustc\nrustdoc\nrustfmt\nrustup\n\n# Yarn Global (/usr/local/bin)\ncreate-react-app\ndnd\ndo-not-disturb\neslint\nfkill\nknex\nnode-gyp\nnodemon\nnpm\nnpx\nts-node\ntsc\ntslint\ntsserver\nprettier\nqnm\nwebpack\nwebpack-dev-server\n```\n\n### Vimari\n\n```json\n{\n  \"excludedUrls\": \"\",\n  \"linkHintCharacters\": \"weafjkl:\",\n  \"detectByCursorStyle\": false,\n  \"scrollSize\": 150,\n  \"openTabUrl\": \"\",\n  \"modifier\": \"\",\n  \"smoothScroll\": true,\n  \"scrollDuration\": 25,\n  \"transparentBindings\": true,\n  \"bindings\": {\n    \"hintToggle\": \"f\",\n    \"newTabHintToggle\": \"shift+f\",\n    \"scrollUp\": \"k\",\n    \"scrollDown\": \"j\",\n    \"scrollLeft\": \"h\",\n    \"scrollRight\": \"l\",\n    \"goToPageTop\": \"g g\",\n    \"goToPageBottom\": \"shift+g\",\n    \"goToFirstInput\": \"v\",\n    \"goBack\": \"shift+j\",\n    \"goForward\": \"shift+k\",\n    \"reload\": \"r\",\n    \"tabBack\": \"a\",\n    \"tabForward\": \"s\",\n    \"closeTab\": \"e\",\n    \"scrollUpHalfPage\": \"\",\n    \"scrollDownHalfPage\": \"\",\n    \"openTab\": \"\"\n  }\n}\n```\n\n### Prettier\n\n```js\nmodule.exports = {\n  semi: false,\n  singleQuote: true,\n  tabWidth: 2,\n  printWidth: 100,\n};\n```\n\n","url":"https://epictools.dev/notes/997aa0e2-f452-425a-b752-122dbd8f62e6.html","relUrl":"notes/997aa0e2-f452-425a-b752-122dbd8f62e6.html"},{"doc":"Cmd","title":"Cmd","hpath":"cmd","content":"### [screencapture](https://ss64.com/osx/screencapture.html) (capture images from screen)\n\n```bash\n# Take screenshot & save it to Desktop with current date as name\nscreencapture -ixoa -t jpg ~/\"Desktop/$(date).jpg\"\n```\n\n### [docker](https://github.com/docker/cli) (run processes in isolated containers)\n\n```bash\n# Delete all containers\nfor i in $(docker ps -a -q); do docker rm $i; done\n\n# List all containers\ndocker ps -a\n\n# Remove a container after it’s stopped\ndocker run --rm [...]\n```\n\n### [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) (run commands against Kubernetes clusters)\n\n```bash\n# Get info on pods in use. Has info on why they failed if they did.\nkubectl describe pods\n\n# Get services across all namespaces\nkubectl get svc --all-namespaces\n\n# Port forward the <pod> from 5432 to localhost 5300 port\nkubectl port-forward <pod> 5300:5432\n```\n\n[nix-env](https://nixos.wiki/wiki/Nix-env) (manipulate or query Nix user environments)\n\n```bash\n# See installed packages\nnix-env -q\n\n# Install packages\nnix-env -iA\n```\n\n[basename](https://www.explainshell.com/explain/1/basename) (strip directory and suffix from filenames)\n\n```bash\nbasename \"/Users/nikivi/Documents/books/Thinking, fast and slow.pdf\" # => Thinking, fast and slow.pdf\n```\n\n[chmod](https://www.explainshell.com/explain/1/chmod) (change file mode bits)\n\n```bash\n# All users can read and write but cannot execute\nchmod 666\n\n# All actions for all users\nchmod 777\n\n# Only owner can do all actions; group and other users are allowed only to read\nchmod 744\n```\n\n[tail](https://www.explainshell.com/explain/1/tail) (output the last part of files) <https://www.explainshell.com/explain/tail>\n\n```bash\n# Shows the last 10 lines of file\ntail /etc/passwd\n\n# -n option allows to change the number of lines to display\n# where n is the number of lines you want to see\n# ie\ntail -5 /etc/passwd\n\n# Use tail +n to print lines starting at line n\n```\n\n[playgo](https://github.com/plutov/playgo) (send .go file to the Go Playground)\n\n```bash\n# Open Go playground of file in browser\nplaygo <file>\n```\n\n[tr](https://www.explainshell.com/explain/tr) (translate or delete characters)\n\n```bash\n# Convert all input to upper case\nls | tr a-z a-z\n\n# Take the output and put into a single line\nls | tr  \"\\n\" \" \"\n\n# Get rid of all numbers\nls -lt | tr -d 0-9\n```\n\n[diff](https://www.explainshell.com/explain/diff) (compare files line by line)\n\n```bash\n# Compare file1 with file2\ndiff file1 file2\n```\n\n[find](https://www.explainshell.com/explain/find) (walk a file hierarchy)\n\n```bash\n# Will search in current directory (.) for the file 'hello_world.py'\n# and will return the path to the file\nfind . -name 'hello_world.py'\n\n# You can also search multiple directories\n# will search both Documents and Desktop folders for the file\nfind Documents Desktop -name 'hello_world.py'\n```\n\n[grep](https://www.explainshell.com/explain/grep) (file pattern searcher)\n\n```bash\n# Print lines from a file or input stream that match an expression\n\n# -i = case insensitive search\n\n# -v = return all lines that do not contain {}\ngrep -v {} story.txt\n```\n\n[man](https://www.explainshell.com/explain/man) (open manual pages)\n\n```bash\n# Search for manual page by keyword\nman -k keyword\n\n# ie if you are looking for command to sort something, run\n# output will include man page name, man section and quick description\nman -k sort\n\n# **Online manual sections**\n\n# (1) = user commands\n# (2) = system calls\n# (3) = higher-level unix programming library documentation\n# (4) = device interface and driver information\n# (5) = file descriptions (system configuration files)\n# (6) = games\n# (7) = file formats, conventions, and encodings (ASCII, suffixes, and so on)\n# (8) = system commands and servers\n\n# Open manual page of passwd on section 5\nman 5 passwd\n\n# I can often get information about options of some command using either --help or -h flags\n# ie\nvim --help # vim -h would also work\n```\n\n[sort](https://www.explainshell.com/explain/sort) (put the lines of a text file in alphanumeric order)\n\n```bash\n# Will process the results of ps aux command with grep\n# and will then sort the output with 'sort' command\nps aux | grep bash | sort\n\n# -n option sorts in numerical order\n# -r option reverses the order of the sort\n```\n\nPlistBuddy (read and write values to plists)\n\n```bash\n# Change version of Alfred workflow info.plist\n/usr/libexec/PlistBuddy -c \"Set :version \\\"X.Y.Z\\\"\" info.plist\n```\n\n[kill](https://www.explainshell.com/explain/kill) (send a signal to a process)\n\n```bash\n# Force quit the process with id 1456\nkill -9 1456\n\n# Stop process 1456\nkill -STOP 1456\n```\n\n[head](https://www.explainshell.com/explain/head) (output the first part of files)\n\n```bash\n# Shows the first 10 lines of file\nhead /etc/passwd\n\n# -n option allows to change the number of lines to display\n# where n is the number of lines you want to see\n# ie\nhead -5 /etc/passwd\n```\n\ntar (manipulate tape archives)\n\n```bash\n# Extract tar files. -x = 'extract'. -v = verbose. -f = point to tar fle\ntar -xvf some_file.tar.gz\n```\n\nenv (set environment and execute command, or print environment)\n\n```bash\n# View enviroment variables\nenv\n\n# Variables to know\n$HOME # Expands to the path of my home folder\n$PS1 # Represents my command prompt line\n\n# I can thus change the way my command prompt looks like this\nPS1=\"\\w >\"\n\n$PATH # Lists all the directories that can be executable with commands\n\n# Add directory /Users/nikivi/bin to the path\nexport PATH=/Users/nikivi/bin:$PATH\n\n# If you put executables there, they will be available\n\n# Exported variables get passed on to child processes. Not-exported variables do not.\n```\n\ncat (concatenate and print files)\n\n```bash\n# Print what is in file1 and file2 to screen\ncat file1 file2\n```\n\n[ngrok](https://github.com/bubenshchykov/ngrok) (expose your localhost to the web)\n\n```bash\n# Creates a shareable link of my local server on port 3000\nngrok http 3000\n```\n\nrmdir (remove empty directories)\n\n```bash\n# Remove directory\nrmdir dir\n\n# Remove non empty directores\nrm -rf dir\n\n# Don't use -rf flags with globs such as star (*)\n# Best to double check commands before running\n```\n\n[mediumexporter](https://github.com/xdamman/mediumexporter) (export medium.com articles to markdown)\n\n```bash\n# i.e.\nmediumexporter https://medium.com/@nikitavoloboev/karabiner-god-mode-7407a5ddc8f6 > medium_post.md\n```\n\nfile (determine file type)\n\n```bash\n# See type of file\nfile <file>\n```\n\ntime (time command execution)\n\n```bash\n# Time how long command took to run\ntime <cmd>\n```\n\n","url":"https://epictools.dev/notes/e5046a2f-732e-42f7-adb6-81f9c8a1b908.html","relUrl":"notes/e5046a2f-732e-42f7-adb6-81f9c8a1b908.html"},{"doc":"Cmd Run","title":"Cmd Run","hpath":"cmd-run","content":"```bash\n# Get IP address\nipconfig getifaddr en0 | pbcopy\n\n# Get macOS version\ndefaults read loginwindow SystemVersionStampAsString | pbcopy\n\n# Flash DNS Cache\nsudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder\n\n# Rebuild launch services\n/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister﻿ -kill -r -domain local -domain user﻿﻿﻿﻿﻿﻿﻿﻿﻿\n\n# List all commands installed in $PATH\nprint -l $commands\n\n# List all commands/aliases installed in $PATH\nwhence -m \\*\n\n# List all commands/aliases/functions installed in $PATH\nprint -rl - ${(k)builtins} ${(k)functions} ${(k)commands}\n\n# Switch to root user on Linux\nsudo su -\n\n# Get current process PID\necho $$\n\n# Reset launchpad\ndefaults write com.apple.dock ResetLaunchPad -bool true; killall Dock\n\n# List GPG secret keys\ngpg --list-secret-keys --keyid-format LONG\n\n# List GPG keys\ngpg --list-keys\n\n# Restart nginx with systemctl\nsudo systemctl restart nginx\n\n# Symlink source dir of Alfred workflow (https://gist.github.com/deanishe/35faae3e7f89f629a94e)\nworkflow-install -s -source\n\n# List all processes running\nps aux\n\n# Print exit code of last command ran\necho $?\n\n# See all aliases assigned\nalias\n\n# List VSCode installed packages\ncode --list-extensions\n```\n\n","url":"https://epictools.dev/notes/6acf0faa-481b-400d-b2b7-c720c050b482.html","relUrl":"notes/6acf0faa-481b-400d-b2b7-c720c050b482.html"},{"doc":"Cmd Explain","title":"Cmd Explain","hpath":"cmd-explain","content":"\n```bash\n# Create symbolic link\nln -s /path/to/original /path/to/symlink\n      └───────┬───────┘\n              └── the path to the original file/folder\n                  can use . or ~ or other relative paths\n```\n\n```bash\n# Copy directory & contents to another place (-r for recursive)\ncp -r /path/to/dir /path/to/wheretocopy\n```\n\n```bash\n# Preview output of script.\n# Piping things into less will preview the content\ncurl https://21.co | less\n```\n\n```bash\n# Move everything from one dir to another.\n\n# i.e. move all files in Downloads to Desktop. * after folder means select everything\nmv -v ~/Downloads/* ~/Desktop/\n```\n\n```bash\n# Get full path to file\nrealpath <file>\n```\n\n```bash\n# Do regex replace (with perl) on a file\nperl -pi -e \"<regex>\" <file>\n\n# i.e.\nperl -pi -e \"s/^\\s*\\{[^\\n']*'([^\\n']*)'[^\\n']*'([^\\n#']*)#[^\\n']*'[^\\n'}]*\\},?/'\\1', '\\2'\\n/gm\" triggers.js\n```\n\n```bash\n# Download URL contents\ncurl -0 <url>\n```\n\n```bash\n# Give executable permission to file.\nchmod a+x <file>\n```\n\n```bash\n# Discard output of command.\n# Will direct ln cmd output to null device that will delete anything written to it.\nln > /dev/null\n```\n\n```bash\n# See how unicode string is encoded internally.\n# https://wiki.soimort.org/unix/cli/\necho hello | hexdump -C\n\n# See how it is encoded in UTF-16: (assume UTF-8 is default encoding)\necho hello | iconv -f utf-8 -t utf-16 | hexdump -C\n```\n\n```bash\n# Search for occurrence of word in a file.\n# i.e. show all occurrences of word fox in file story.txt\ngrep 'fox' story.txt\n```\n\n```bash\n# Search whether a string occurs in a directory\n# -l = print filenames of matching files\ngrep -rl \"string\" /path\n```\n","url":"https://epictools.dev/notes/3b70dd76-e2b4-48fc-89f2-215bd5cc1b53.html","relUrl":"notes/3b70dd76-e2b4-48fc-89f2-215bd5cc1b53.html"},{"doc":"Bookmarklets","title":"Bookmarklets","hpath":"bookmarklets","content":"Go to initial commit on GitHub repo. Must have GitHub repo open in active tab.\n\n```js\njavascript: ((b) =>\n  fetch(\"https://api.github.com/repos/\" + b[1] + \"/commits?sha=\" + (b[2] || \"\"))\n    .then((c) => Promise.all([c.headers.get(\"link\"), c.json()]))\n    .then((c) => {\n      if (c[0]) {\n        var d = c[0]\n          .split(\",\")[1]\n          .split(\";\")[0]\n          .slice(2, -1);\n        return fetch(d).then((e) => e.json());\n      }\n      return c[1];\n    })\n    .then((c) => c.pop().html_url)\n    .then((c) => (window.location = c)))(\n  window.location.pathname.match(/\\/([^\\/]+\\/[^\\/]+)(?:\\/tree\\/([^\\/]+))?/)\n);\n```\n\n","url":"https://epictools.dev/notes/420fe7bc-4230-4fe7-bb1a-bd13f48f1f33.html","relUrl":"notes/420fe7bc-4230-4fe7-bb1a-bd13f48f1f33.html"},{"doc":"Bash","title":"Bash","hpath":"bash","content":"```bash\n# Check if command is in PATH\ncheckDep() {\n     path=`command -v ${1}` && echo \"${1} found at ${path}\" || { echo \"${1} not found\" >&2 ; exit 1; }\n}\n```\n\n```bash\n# Get output of command. https://www.cyberciti.biz/faq/unix-linux-bsd-appleosx-bash-assign-variable-command-output/\n# i.e. save output of date to var now\nnow=$(date)\n```\n\n```md\nFile testing\n\n![](https://i.imgur.com/QGkHbPm.png)\n```\n\n```bash\n# Pipe output to file.\n# i.e. pipe output of ls to output.txt\nls > output.txt\n```\n\n```bash\n# Check if no arguments passed\nif [ $# -eq 0 ] then ... fi\n```\n\n```bash\n# Check if file does not exist\n# Putting ! before makes it a not statement. Spaces before and after [] are important.\nif [ ! -f ~/Desktop/file.txt ]; then\n    echo \"File not found!\"\nfi\n```\n\n```bash\n# Source vs ./\n# Runs the script as an executable file, launching a new shell to run it\n./script\n\n# Reads and executes commands from filename in the current shell environment\nsource script\n```\n\n```bash\n# need to wrap the cd command inside () to run it in scope of the cd\n# i.e. pod install will be run inside ios dir\n(cd ios && pod install)\n```\n\n","url":"https://epictools.dev/notes/e697bb17-2af9-4da3-b438-7f52942c1a5b.html","relUrl":"notes/e697bb17-2af9-4da3-b438-7f52942c1a5b.html"},{"doc":"Applescript","title":"Applescript","hpath":"applescript","content":"```applescript\n-- Scrape all URLs from all tabs in all windows\n-- https://forum.keyboardmaestro.com/t/save-and-restore-safari-session-tabs/15036/4\nset AppleScript's text item delimiters to linefeed\ntell application \"Safari\"\n   set urlList to (URL of tabs of windows) as text\nend tell\nreturn urlList\n```\n\n```applescript\n-- Expand Typinator abbreviation\ntell application \"Typinator\"\n  expand string \"dd\"\nend tell\n```\n\n```applescript\n-- Print URL of current tab\ntell app \"safari\" to url of document 1\n```\n\n```applescript\n-- Show source of current document\ntell app \"safari\" to source of document 1\n```\n\n```applescript\n-- Activate menu bar of an app\n\n-- Accepts a list of form: `{\"Finder\", \"View\", \"Arrange By\", \"Date\"}`\n-- Execute the specified menu item.  In this case, assuming the Finder\n-- is the active application, arranging the frontmost folder by date.\non menu_click(mList)\n  local appName, topMenu, r\n\n  -- Validate our input\n  if mList's length < 3 then error \"Menu list is not long enough\"\n\n  -- Set these variables for clarity and brevity later on\n  set {appName, topMenu} to (items 1 through 2 of mList)\n  set r to (items 3 through (mList's length) of mList)\n\n  -- This overly-long line calls the menu_recurse function with\n  -- two arguments: r, and a reference to the top-level menu\n  tell application \"System Events\" to my menu_click_recurse(r, ((process appName)'s ¬\n    (menu bar 1)'s (menu bar item topMenu)'s (menu topMenu)))\nend menu_click\n\non menu_click_recurse(mList, parentObject)\n  local f, r\n\n  -- `f` = first item, `r` = rest of items\n  set f to item 1 of mList\n  if mList's length > 1 then set r to (items 2 through (mList's length) of mList)\n\n  -- Either actually click the menu item, or recurse again\n  tell application \"System Events\"\n    if mList's length is 1 then\n      click parentObject's menu item f\n    else\n      my menu_click_recurse(r, (parentObject's (menu item f)'s (menu f)))\n    end if\n  end tell\nend menu_click_recurse\n\n-- Example of use\ntell application \"Safari\" to activate\n\nmenu_click({\"Safari\", \"Bookmarks\", \"Edit Bookmarks\"})\n```\n\n```applescript\n-- Get path of app\nPOSIX path of (path to application \"Sublime Text\")\n```\n\n```applescript\n-- Assign variable to system variable\nset var1 to (system attribute \"var1\")\n```\n\n```applescript\n-- Trigger a keypress\n-- http://macbiblioblog.blogspot.com/2014/12/key-codes-for-function-and-special-keys.html\n\n-- Trigger caps lock and tilda together\ntell application \"System Events\" to key code 50 using {option down, control down}\n\n-- Trigger ⌘ + a\ntell application \"System Events\" to keystroke \"a\" using command down\n\n-- Trigger ⏎\ntell application \"System Events\" to key code 36\n```\n\n```applescript\n-- Run KM macro\ntell application \"Keyboard Maestro Engine\"\ndo script \"w: github\"\nend tell\n```\n\n```applescript\n-- Capture first argument to script\n\n-- Need to wrap it in run argv clause\non run argv\n  tell application \"System Events\"\n    -- Type out the first argument\n    keystroke (item 1 of argv)\n  end tell\nend run\n```\n\n```applescript\n-- Type something\ntell application \"System Events\"\n  keystroke \"Hello\"\nend tell\n```\n\n```applescript\n-- Get path of open document in an app\n\n-- Change \"MacDown\" to another app\ntell application \"MacDown\" to set file_path to file of front document\n```\n\n```applescript\n-- Get URL of open Safari tab\ntell application \"Safari\" to return URL of front document\n```\n\n```applescript\n-- Convert to POSIX path\nset inputPath to POSIX path of input\n```\n\n```applescript\n-- Select first result from google search and load it in the front tab.\n-- Works on Safari only.\n\nset xpathStr to \"//*[@class=\\\\'r\\\\']/a\"\nset strJS to \"\n\nvar xpathResults = document.evaluate('\" & xpathStr & \"', document, null, 0, null),\n  nodeList = [],\n  oNode;\n\nwhile (oNode = xpathResults.iterateNext()) {\n  nodeList.push(oNode.href);\n}\n\nnodeList;\n\n\"\ntell application \"Safari\"\n  set linkList to (do JavaScript strJS in front document)\n\n  if linkList ≠ {} then\n    set firstLink to item 1 of linkList\n    set URL of front document to firstLink\n  end if\n\nend tell\n```\n\n```applescript\n-- Search Alfred with query\nosascript -e \"tell application \\\"Alfred 4\\\" to search \\\"$*\\\"\"\n\n```\n\n```applescript\n-- Get number of Safari windows\ntell application \"Safari\"\n   set numberOfSafariWindows to length of (get current tab of windows)\nend tell\n```\n\n```applescript\n-- Search for tag in finder\non run argv\n  set theQuery to first item of argv\n\n  tell application \"Finder\"\n    make new Finder window\n    activate\n  end tell\n  delay 0.2\n  tell application \"System Events\" to tell process \"Finder\"\n    keystroke \"f\" using command down\n    delay 0.1\n    keystroke \"tag:\"\n    keystroke theQuery\n    key code 36  -- Return\n  end tell\nend run\n```\n\n```applescript\n-- Check if currently running app is full screen\ntell application \"System Events\"\n    tell (first application process whose frontmost is true)\n      tell (first window whose subrole is \"AXStandardWindow\")\n\n        value of attribute \"AXFullScreen\"\n      end tell\n    end tell\n  end tell\n```\n\n```applescript\n-- Set front window of front app to full-screen\ntry\n  tell application \"System Events\"\n    tell (first application process whose frontmost is true)\n      tell (first window whose subrole is \"AXStandardWindow\")\n\n        set fullScreen to value of attribute \"AXFullScreen\"\n\n        if fullScreen = false then\n          set value of attribute \"AXFullScreen\" to true\n        end if\n\n      end tell\n    end tell\n  end tell\n\non error e number n\n  set e to e & return & return & \"Num: \" & n\n  if n ≠ -128 then\n    try\n      tell application (path to frontmost application as text) to set ddButton to button returned of ¬\n        (display dialog e with title \"ERROR!\" buttons {\"Copy Error Message\", \"Cancel\", \"OK\"} ¬\n          default button \"OK\" giving up after 30)\n      if ddButton = \"Copy Error Message\" then set the clipboard to e\n    end try\n  end if\nend try\n```\n\n```applescript\n-- Set clipboard to\nset the clipboard to \"Some text\"\n```\n\n```applescript\n-- cd to passed in dir in iTerm\non run argv\n  set theQuery to item 1 of argv\n  set cmdStr to \"cd \" & theQuery\n  tell application \"iTerm\"\n    if exists window 1 then\n      tell current window\n        tell current session to write text cmdStr\n      end tell\n    else\n      create window with default profile\n      tell current window\n        tell current session to write text cmdStr\n      end tell\n    end if\n  end tell\nend run\n```\n\n```applescript\n-- Run shell command in sudo mode\ndo shell script \"command here\" with administrator privileges\n```\n\n","url":"https://epictools.dev/notes/95873c03-bcf5-4e96-8dde-93de466efa83.html","relUrl":"notes/95873c03-bcf5-4e96-8dde-93de466efa83.html"},{"doc":"Alfred","title":"Alfred","hpath":"alfred","content":"Strip title and subtext from input. Put inside [JSON utility](https://www.alfredapp.com/help/workflows/utilities/json/). Useful to get clean prompts in Alfred (i.e. it's used in [web-searches](https://github.com/nikitavoloboev/alfred-web-searches) workflow)\n\n```json\n{\n  \"alfredworkflow\": {\n    \"arg\": \"{query}\",\n    \"config\": {\n      \"title\": \"\",\n      \"runningsubtext\": \"\",\n      \"subtext\": \"\"\n    },\n    \"variables\": {}\n  }\n}\n```\n\nExport workflow to a location with version number in clipboard.\n\n```bash\nreadonly workflow_dir=\"{query}\"\n\nif [[ ! \"${workflow_dir}\" == *'Alfred.alfredpreferences/workflows/user.workflow.'* ]]\nthen\n  echo \"You need to be inside the workflow’s directory in Alfred’s preferences directory.\" >&2\n  exit 1\nfi\n\nreadonly workflow_name=\"$(/usr/libexec/PlistBuddy -c 'print name' \"${workflow_dir}/info.plist\")\"\nreadonly workflow_version=\"$(/usr/libexec/PlistBuddy -c 'print version' \"${workflow_dir}/info.plist\")\"\nreadonly workflow_file=\"${HOME}/Desktop/${workflow_name}-${workflow_version}.alfredworkflow\"\n\nfind \"${workflow_dir}\" -iname '.DS_Store' -delete\n\nif /usr/libexec/PlistBuddy -c 'Print variablesdontexport' \"${workflow_dir}/info.plist\" &> /dev/null\nthen\n  readonly workflow_dir_to_package=\"$(mktemp -d)\"\n  cp -R \"${workflow_dir}/\"* \"${workflow_dir_to_package}\"\n  readonly tmp_info_plist=\"${workflow_dir_to_package}/info.plist\"\n  /usr/libexec/PlistBuddy -c 'print variablesdontexport' \"${tmp_info_plist}\" | grep '    ' | sed -E 's/ {4}//' | xargs -I {} /usr/libexec/PlistBuddy -c \"set variables:'{}' ''\" \"${tmp_info_plist}\"\nelse\n  readonly workflow_dir_to_package=\"${workflow_dir}\"\nfi\n\nif ditto -ck \"${workflow_dir_to_package}\" \"${workflow_file}\"\nthen\n  echo \"Created ${workflow_file}\"\n  exit 0\nelse\n  echo \"There was and error creating ${workflow_file}\"\n  exit 1\nfi\n```\n\n","url":"https://epictools.dev/notes/8c17d257-ff2f-41ed-9c7e-64056d3efdcc.html","relUrl":"notes/8c17d257-ff2f-41ed-9c7e-64056d3efdcc.html"}]
